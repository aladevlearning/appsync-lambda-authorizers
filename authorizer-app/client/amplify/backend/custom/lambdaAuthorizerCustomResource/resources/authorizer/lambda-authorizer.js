"use strict";
const fs = require('fs');
const path = require('path');
const jwt = require('jsonwebtoken');
exports.handler = async (event) => {
    console.log(`event >`, JSON.stringify(event, null, 2));
    console.log(path.resolve("./keys/public.pub"));
    const publicKey = fs.readFileSync(__dirname + '/keys/public.pub');
    const { authorizationToken, requestContext: { apiId, accountId }, } = event;
    const result = await jwt.verify(authorizationToken, publicKey);
    console.log('token result', result);
    const response = {
        isAuthorized: result && result.foo && result.foo === 'bar',
        resolverContext: {
            userid: 'test-user-id',
            info: 'contextual information A',
            more_info: 'contextual information B',
        },
        deniedFields: [
            `arn:aws:appsync:${process.env.AWS_REGION}:${accountId}:apis/${apiId}/types/Event/fields/comments`,
            `Mutation.createEvent`,
        ],
        ttlOverride: 10,
    };
    console.log(`response >`, JSON.stringify(response, null, 2));
    return response;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFtYmRhLWF1dGhvcml6ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJsYW1iZGEtYXV0aG9yaXplci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBO0FBQ3hCLE1BQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM1QixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7QUFjbkMsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLEVBQUUsS0FBbUIsRUFBRSxFQUFFO0lBQzVDLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3RELE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUM7SUFDL0MsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUMsQ0FBQztJQUVsRSxNQUFNLEVBQ0Ysa0JBQWtCLEVBQ2xCLGNBQWMsRUFBRSxFQUFDLEtBQUssRUFBRSxTQUFTLEVBQUMsR0FDckMsR0FBRyxLQUFLLENBQUE7SUFFVCxNQUFNLE1BQU0sR0FBRyxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFFL0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDbkMsTUFBTSxRQUFRLEdBQUc7UUFDYixZQUFZLEVBQUUsTUFBTSxJQUFJLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsS0FBSyxLQUFLO1FBQzFELGVBQWUsRUFBRTtZQUNiLE1BQU0sRUFBRSxjQUFjO1lBQ3RCLElBQUksRUFBRSwwQkFBMEI7WUFDaEMsU0FBUyxFQUFFLDBCQUEwQjtTQUN4QztRQUNELFlBQVksRUFBRTtZQUNWLG1CQUFtQixPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsSUFBSSxTQUFTLFNBQVMsS0FBSyw4QkFBOEI7WUFDbEcsc0JBQXNCO1NBQ3pCO1FBQ0QsV0FBVyxFQUFFLEVBQUU7S0FDbEIsQ0FBQTtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQzVELE9BQU8sUUFBUSxDQUFBO0FBQ25CLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKVxyXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXHJcbmNvbnN0IGp3dCA9IHJlcXVpcmUoJ2pzb253ZWJ0b2tlbicpXHJcblxyXG50eXBlIEFwcFN5bmNFdmVudCA9IHtcclxuICAgIFwiYXV0aG9yaXphdGlvblRva2VuXCI6IHN0cmluZyxcclxuICAgIFwicmVxdWVzdENvbnRleHRcIjoge1xyXG4gICAgICAgIFwiYXBpSWRcIjogc3RyaW5nLFxyXG4gICAgICAgIFwiYWNjb3VudElkXCI6IHN0cmluZyxcclxuICAgICAgICBcInJlcXVlc3RJZFwiOiBzdHJpbmcsXHJcbiAgICAgICAgXCJxdWVyeVN0cmluZ1wiOiBzdHJpbmcsXHJcbiAgICAgICAgXCJvcGVyYXRpb25OYW1lXCI6IHN0cmluZyxcclxuICAgICAgICBcInZhcmlhYmxlc1wiOiB7fVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnRzLmhhbmRsZXIgPSBhc3luYyAoZXZlbnQ6IEFwcFN5bmNFdmVudCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coYGV2ZW50ID5gLCBKU09OLnN0cmluZ2lmeShldmVudCwgbnVsbCwgMikpXHJcbiAgICBjb25zb2xlLmxvZyhwYXRoLnJlc29sdmUoXCIuL2tleXMvcHVibGljLnB1YlwiKSk7XHJcbiAgICBjb25zdCBwdWJsaWNLZXkgPSBmcy5yZWFkRmlsZVN5bmMoX19kaXJuYW1lICsgJy9rZXlzL3B1YmxpYy5wdWInKTtcclxuXHJcbiAgICBjb25zdCB7XHJcbiAgICAgICAgYXV0aG9yaXphdGlvblRva2VuLFxyXG4gICAgICAgIHJlcXVlc3RDb250ZXh0OiB7YXBpSWQsIGFjY291bnRJZH0sXHJcbiAgICB9ID0gZXZlbnRcclxuXHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBqd3QudmVyaWZ5KGF1dGhvcml6YXRpb25Ub2tlbiwgcHVibGljS2V5KTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygndG9rZW4gcmVzdWx0JywgcmVzdWx0KVxyXG4gICAgY29uc3QgcmVzcG9uc2UgPSB7XHJcbiAgICAgICAgaXNBdXRob3JpemVkOiByZXN1bHQgJiYgcmVzdWx0LmZvbyAmJiByZXN1bHQuZm9vID09PSAnYmFyJyxcclxuICAgICAgICByZXNvbHZlckNvbnRleHQ6IHtcclxuICAgICAgICAgICAgdXNlcmlkOiAndGVzdC11c2VyLWlkJyxcclxuICAgICAgICAgICAgaW5mbzogJ2NvbnRleHR1YWwgaW5mb3JtYXRpb24gQScsXHJcbiAgICAgICAgICAgIG1vcmVfaW5mbzogJ2NvbnRleHR1YWwgaW5mb3JtYXRpb24gQicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZW5pZWRGaWVsZHM6IFtcclxuICAgICAgICAgICAgYGFybjphd3M6YXBwc3luYzoke3Byb2Nlc3MuZW52LkFXU19SRUdJT059OiR7YWNjb3VudElkfTphcGlzLyR7YXBpSWR9L3R5cGVzL0V2ZW50L2ZpZWxkcy9jb21tZW50c2AsXHJcbiAgICAgICAgICAgIGBNdXRhdGlvbi5jcmVhdGVFdmVudGAsXHJcbiAgICAgICAgXSxcclxuICAgICAgICB0dGxPdmVycmlkZTogMTAsXHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZyhgcmVzcG9uc2UgPmAsIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLCBudWxsLCAyKSlcclxuICAgIHJldHVybiByZXNwb25zZVxyXG59Il19