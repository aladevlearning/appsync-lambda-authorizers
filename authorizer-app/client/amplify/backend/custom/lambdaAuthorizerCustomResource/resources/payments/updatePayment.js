"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AWS = require('aws-sdk');
const docClient = new AWS.DynamoDB.DocumentClient();
async function updatePayment(payment) {
    let params = {
        TableName: process.env.CDK_PAYMENTS_TABLE,
        Key: {
            id: payment.id
        },
        ExpressionAttributeValues: {},
        ExpressionAttributeNames: {},
        UpdateExpression: "",
        ReturnValues: "UPDATED_NEW"
    };
    let prefix = "set ";
    let attributes = Object.keys(payment);
    for (let i = 0; i < attributes.length; i++) {
        let attribute = attributes[i];
        if (attribute !== "id") {
            params["UpdateExpression"] += prefix + "#" + attribute + " = :" + attribute;
            params["ExpressionAttributeValues"][":" + attribute] = payment[attribute];
            params["ExpressionAttributeNames"]["#" + attribute] = attribute;
            prefix = ", ";
        }
    }
    console.log('params: ', params);
    try {
        await docClient.update(params).promise();
        return payment;
    }
    catch (err) {
        console.log('DynamoDB error: ', err);
        return null;
    }
}
exports.default = updatePayment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBkYXRlUGF5bWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInVwZGF0ZVBheW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0FBV3BELEtBQUssVUFBVSxhQUFhLENBQUMsT0FBWTtJQUNyQyxJQUFJLE1BQU0sR0FBWTtRQUNsQixTQUFTLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0I7UUFDekMsR0FBRyxFQUFFO1lBQ0QsRUFBRSxFQUFFLE9BQU8sQ0FBQyxFQUFFO1NBQ2pCO1FBQ0QseUJBQXlCLEVBQUUsRUFBRTtRQUM3Qix3QkFBd0IsRUFBRSxFQUFFO1FBQzVCLGdCQUFnQixFQUFFLEVBQUU7UUFDcEIsWUFBWSxFQUFFLGFBQWE7S0FDOUIsQ0FBQztJQUNGLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztJQUNwQixJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RDLEtBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3BDLElBQUksU0FBUyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLFNBQVMsS0FBSyxJQUFJLEVBQUU7WUFDcEIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksTUFBTSxHQUFHLEdBQUcsR0FBRyxTQUFTLEdBQUcsTUFBTSxHQUFHLFNBQVMsQ0FBQztZQUM1RSxNQUFNLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxHQUFHLEdBQUcsU0FBUyxDQUFDLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFFLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxTQUFTLENBQUM7WUFDaEUsTUFBTSxHQUFHLElBQUksQ0FBQztTQUNqQjtLQUNKO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUE7SUFDL0IsSUFBSTtRQUNBLE1BQU0sU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtRQUN4QyxPQUFPLE9BQU8sQ0FBQTtLQUNqQjtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsRUFBRSxHQUFHLENBQUMsQ0FBQTtRQUNwQyxPQUFPLElBQUksQ0FBQTtLQUNkO0FBQ0wsQ0FBQztBQUVELGtCQUFlLGFBQWEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuY29uc3QgZG9jQ2xpZW50ID0gbmV3IEFXUy5EeW5hbW9EQi5Eb2N1bWVudENsaWVudCgpO1xyXG5cclxudHlwZSBQYXJhbXMgPSB7XHJcbiAgICBUYWJsZU5hbWU6IHN0cmluZyB8IHVuZGVmaW5lZCxcclxuICAgIEtleTogc3RyaW5nIHwge30sXHJcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiBhbnksXHJcbiAgICBFeHByZXNzaW9uQXR0cmlidXRlTmFtZXM6IGFueSxcclxuICAgIFVwZGF0ZUV4cHJlc3Npb246IHN0cmluZyxcclxuICAgIFJldHVyblZhbHVlczogc3RyaW5nXHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIHVwZGF0ZVBheW1lbnQocGF5bWVudDogYW55KSB7XHJcbiAgICBsZXQgcGFyYW1zIDogUGFyYW1zID0ge1xyXG4gICAgICAgIFRhYmxlTmFtZTogcHJvY2Vzcy5lbnYuQ0RLX1BBWU1FTlRTX1RBQkxFLFxyXG4gICAgICAgIEtleToge1xyXG4gICAgICAgICAgICBpZDogcGF5bWVudC5pZFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlczoge30sXHJcbiAgICAgICAgRXhwcmVzc2lvbkF0dHJpYnV0ZU5hbWVzOiB7fSxcclxuICAgICAgICBVcGRhdGVFeHByZXNzaW9uOiBcIlwiLFxyXG4gICAgICAgIFJldHVyblZhbHVlczogXCJVUERBVEVEX05FV1wiXHJcbiAgICB9O1xyXG4gICAgbGV0IHByZWZpeCA9IFwic2V0IFwiO1xyXG4gICAgbGV0IGF0dHJpYnV0ZXMgPSBPYmplY3Qua2V5cyhwYXltZW50KTtcclxuICAgIGZvciAobGV0IGk9MDsgaTxhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgbGV0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XHJcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gXCJpZFwiKSB7XHJcbiAgICAgICAgICAgIHBhcmFtc1tcIlVwZGF0ZUV4cHJlc3Npb25cIl0gKz0gcHJlZml4ICsgXCIjXCIgKyBhdHRyaWJ1dGUgKyBcIiA9IDpcIiArIGF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgcGFyYW1zW1wiRXhwcmVzc2lvbkF0dHJpYnV0ZVZhbHVlc1wiXVtcIjpcIiArIGF0dHJpYnV0ZV0gPSBwYXltZW50W2F0dHJpYnV0ZV07XHJcbiAgICAgICAgICAgIHBhcmFtc1tcIkV4cHJlc3Npb25BdHRyaWJ1dGVOYW1lc1wiXVtcIiNcIiArIGF0dHJpYnV0ZV0gPSBhdHRyaWJ1dGU7XHJcbiAgICAgICAgICAgIHByZWZpeCA9IFwiLCBcIjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zb2xlLmxvZygncGFyYW1zOiAnLCBwYXJhbXMpXHJcbiAgICB0cnkge1xyXG4gICAgICAgIGF3YWl0IGRvY0NsaWVudC51cGRhdGUocGFyYW1zKS5wcm9taXNlKClcclxuICAgICAgICByZXR1cm4gcGF5bWVudFxyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0R5bmFtb0RCIGVycm9yOiAnLCBlcnIpXHJcbiAgICAgICAgcmV0dXJuIG51bGxcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlUGF5bWVudDsiXX0=